{"ast":null,"code":"var _jsxFileName = \"/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/AddJobForEmployer.js\",\n    _s3 = $RefreshSig$();\n\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation, Link } from \"react-router-dom\";\nimport HeaderForEmployer from \"./HeaderForEmployer\";\nimport \"../../style/AddJobForEmployer.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddJobForEmployer() {\n  _s3();\n\n  var _s = $RefreshSig$(),\n      _s2 = $RefreshSig$();\n\n  const [data, setData] = useState([]);\n  const [status, setStatus] = useState(\"\");\n  const [job, setJob] = useState({});\n  const endPoint1 = \"http://localhost:8080/jobcategory\";\n\n  const getJob = () => {\n    fetch(endPoint1, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      setJob(data);\n      console.log(job);\n    });\n  };\n\n  useEffect(() => {\n    getJob();\n  }, []);\n\n  const MyTextInput = _ref => {\n    _s();\n\n    let {\n      label,\n      ...props\n    } = _ref;\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"mb-3 mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: props.id || props.name,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"text-input\",\n          class: \"form-control\",\n          ...field,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: meta.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  };\n\n  _s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n    return [useField];\n  });\n\n  const MySelect = _ref2 => {\n    _s2();\n\n    let {\n      label,\n      ...props\n    } = _ref2;\n    const [field, meta] = useField(props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: props.id || props.name,\n        children: label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        class: \"form-control\",\n        ...field,\n        ...props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"error\",\n        children: meta.error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s2(MySelect, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n    return [useField];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \".container-fluid\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 50\n      },\n      children: [\" \", /*#__PURE__*/_jsxDEV(HeaderForEmployer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"container mt-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          justifyContent: \"center\",\n          textAlign: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Add a new job\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          title: \"\",\n          salaryRange: \"\",\n          specialization: \"\",\n          description: \"0\",\n          level: \"\",\n          location: \"\"\n        },\n        validationSchema: Yup.object({\n          title: Yup.string().max(50, \"Must be 50 characters or less\").required(\"Required\"),\n          salaryRange: Yup.string().required(\"Required\"),\n          specialization: Yup.string().required(\"Required\"),\n          description: Yup.string().required(\"Required\"),\n          level: Yup.string().required(\"Required\"),\n          location: Yup.string().required(\"Required\")\n        }) //   onSubmit={(values) => {\n        //     var today = new Date(),\n        //       date =\n        //         today.getFullYear() +\n        //         \"-\" +\n        //         (today.getMonth() + 1) +\n        //         \"-\" +\n        //         today.getDate();\n        //     addProduct(\n        //       values.productName,\n        //       values.brand,\n        //       values.price,\n        //       values.subcategory_id,\n        //       values.product_detail,\n        //       date.toString(),\n        //       values.quantity\n        //     );\n        //   }}\n        ,\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(MySelect, {\n            label: \"Subcategory Type\",\n            name: \"subcategory_id\",\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              children: \"Select a sub-category type\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), job.map(job => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: job.id,\n              children: job.title\n            }, job.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"Job Title\",\n            name: \"title\",\n            type: \"text\",\n            placeholder: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 136,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"Salary\",\n            name: \"salaryRange\",\n            type: \"text\",\n            placeholder: \"Brand\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"Specialization\",\n            name: \"specialization\",\n            type: \"text\",\n            placeholder: \"Specialization\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"Description\",\n            name: \"description\",\n            type: \"text\",\n            placeholder: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"Level\",\n            name: \"level\",\n            type: \"text\",\n            placeholder: \"Level\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n            label: \"Location\",\n            name: \"location\",\n            type: \"text\",\n            placeholder: \"Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"d-grid gap-2 d-md-flex justify-content-md-center\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"submit\",\n              className: \"saveaddproduct\",\n              children: \"Add\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n\n_s3(AddJobForEmployer, \"TKdM+yPjFdiLxcldObvKhF4B2H8=\");\n\n_c = AddJobForEmployer;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddJobForEmployer\");","map":{"version":3,"sources":["/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/AddJobForEmployer.js"],"names":["Formik","Form","useField","Yup","React","useState","useEffect","useNavigate","useLocation","Link","HeaderForEmployer","AddJobForEmployer","data","setData","status","setStatus","job","setJob","endPoint1","getJob","fetch","method","headers","then","response","json","console","log","MyTextInput","label","props","field","meta","id","name","touched","error","MySelect","marginBottom","flex","justifyContent","textAlign","title","salaryRange","specialization","description","level","location","object","string","max","required","map"],"mappings":"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","sourcesContent":["import { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation, Link } from \"react-router-dom\";\nimport HeaderForEmployer from \"./HeaderForEmployer\";\nimport \"../../style/AddJobForEmployer.css\";\n\nexport default function AddJobForEmployer() {\n  const [data, setData] = useState([]);\n\n  const [status, setStatus] = useState(\"\");\n  const [job, setJob] = useState({});\n\n  const endPoint1 = \"http://localhost:8080/jobcategory\";\n\n  const getJob = () => {\n    fetch(endPoint1, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setJob(data);\n        console.log(job);\n      });\n  };\n\n  useEffect(() => {\n    getJob();\n  }, []);\n\n  const MyTextInput = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return (\n      <>\n        <div class=\"mb-3 mt-3\">\n          <label htmlFor={props.id || props.name}>{label}</label>\n          <input\n            className=\"text-input\"\n            class=\"form-control\"\n            {...field}\n            {...props}\n          />\n          {meta.touched && meta.error ? (\n            <div className=\"error\">{meta.error}</div>\n          ) : null}\n        </div>\n      </>\n    );\n  };\n\n  const MySelect = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n      <div>\n        <label htmlFor={props.id || props.name}>{label}</label>\n        <select class=\"form-control\" {...field} {...props} />\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\".container-fluid\">\n      <div style={{ marginBottom: 50 }}>\n        {\" \"}\n        <HeaderForEmployer />\n      </div>\n      <div class=\"container mt-3\">\n        <div\n          style={{\n            flex: 1,\n            justifyContent: \"center\",\n            textAlign: \"center\",\n          }}\n        >\n          <h1>Add a new job</h1>\n        </div>\n        <Formik\n          initialValues={{\n            title: \"\",\n            salaryRange: \"\",\n            specialization: \"\",\n            description: \"0\",\n            level: \"\",\n            location: \"\",\n          }}\n          validationSchema={Yup.object({\n            title: Yup.string()\n              .max(50, \"Must be 50 characters or less\")\n              .required(\"Required\"),\n            salaryRange: Yup.string().required(\"Required\"),\n            specialization: Yup.string().required(\"Required\"),\n            description: Yup.string().required(\"Required\"),\n            level: Yup.string().required(\"Required\"),\n            location: Yup.string().required(\"Required\"),\n          })}\n          //   onSubmit={(values) => {\n          //     var today = new Date(),\n          //       date =\n          //         today.getFullYear() +\n          //         \"-\" +\n          //         (today.getMonth() + 1) +\n          //         \"-\" +\n          //         today.getDate();\n          //     addProduct(\n          //       values.productName,\n          //       values.brand,\n          //       values.price,\n          //       values.subcategory_id,\n          //       values.product_detail,\n          //       date.toString(),\n          //       values.quantity\n          //     );\n          //   }}\n        >\n          <Form>\n            <MySelect label=\"Subcategory Type\" name=\"subcategory_id\">\n              <option>Select a sub-category type</option>\n              {job.map((job) => (\n                <option key={job.id} value={job.id}>\n                  {job.title}\n                </option>\n              ))}\n            </MySelect>\n            <br />\n\n            <MyTextInput\n              label=\"Job Title\"\n              name=\"title\"\n              type=\"text\"\n              placeholder=\"Title\"\n            />\n\n            <MyTextInput\n              label=\"Salary\"\n              name=\"salaryRange\"\n              type=\"text\"\n              placeholder=\"Brand\"\n            />\n\n            <MyTextInput\n              label=\"Specialization\"\n              name=\"specialization\"\n              type=\"text\"\n              placeholder=\"Specialization\"\n            />\n\n            <MyTextInput\n              label=\"Description\"\n              name=\"description\"\n              type=\"text\"\n              placeholder=\"Description\"\n            />\n\n            <MyTextInput\n              label=\"Level\"\n              name=\"level\"\n              type=\"text\"\n              placeholder=\"Level\"\n            />\n            <MyTextInput\n              label=\"Location\"\n              name=\"location\"\n              type=\"text\"\n              placeholder=\"Location\"\n            />\n\n            <br />\n            <div class=\"d-grid gap-2 d-md-flex justify-content-md-center\">\n              <button type=\"submit\" className=\"saveaddproduct\">\n                Add\n              </button>\n            </div>\n          </Form>\n        </Formik>\n      </div>{\" \"}\n      <br /> <br />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}