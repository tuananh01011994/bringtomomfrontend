{"ast":null,"code":"var _jsxFileName = \"/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/InfoForEmployee.js\",\n    _s2 = $RefreshSig$();\n\nimport { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../../style/SignUp.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport HeaderForEmployee from \"./HeaderForEmployee\";\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function InforForForEmployee() {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  let navigate = useNavigate();\n  useEffect(() => getUserID(), []);\n  const [userInfo, setUserInfo] = useState({});\n  const endPoint = \"https://bringmoneytomom.herokuapp.com/employee/\";\n\n  const getUserID = async () => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    console.log(\"User id... :\" + loggedInUser);\n  };\n\n  const load = () => {\n    fetch(endPoint + localStorage.getItem(\"user\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(response => response.json()).then(data => {\n      console.log(data);\n      setUserInfo(data);\n      console.log(userInfo);\n    });\n  };\n\n  useEffect(() => {\n    load();\n    setUserInfo(userInfo);\n  }, []); // useEffect(() => {\n  //   setUserInfo(userInfo);\n  // }, [userInfo]);\n\n  const MyTextInput = _ref => {\n    _s();\n\n    let {\n      label,\n      ...props\n    } = _ref;\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"d-flex flex-row align-items-center mb-4\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"form-outline flex-fill mb-0\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          class: \"form-label\",\n          htmlFor: props.id || props.name,\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"text-input\",\n          class: \"form-control\",\n          ...field,\n          ...props\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), meta.touched && meta.error ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: meta.error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 13\n        }, this) : null]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this);\n  };\n\n  _s(MyTextInput, \"ImX69+3rRx1BE5Ru6eNKPZVOEn4=\", false, function () {\n    return [useField];\n  });\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: /*#__PURE__*/_jsxDEV(\"section\", {\n      class: \"vh-100\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"container h-100\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\" \", /*#__PURE__*/_jsxDEV(HeaderForEmployee, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"row d-flex justify-content-center align-items-center h-100\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            class: \"col-lg-12 col-xl-11\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              class: \"card text-black\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                class: \"card-body p-md-3\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"row justify-content-center\",\n                  children: /*#__PURE__*/_jsxDEV(\"div\", {\n                    class: \"col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1\",\n                    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                      class: \"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\",\n                      children: \"Information\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 81,\n                      columnNumber: 23\n                    }, this), /*#__PURE__*/_jsxDEV(Formik, {\n                      class: \"mx-1 mx-md-4\",\n                      initialValues: {\n                        name: \"\",\n                        password: \"\",\n                        age: \"\",\n                        phone: \"\",\n                        specialization: \"\",\n                        qualification: \"\",\n                        exp: \"\"\n                      } // Check validation of each attribute\n                      ,\n                      validationSchema: Yup.object({\n                        name: Yup.string().max(30, \"Must be 30 characters or less\").required(\"Required\"),\n                        phone: Yup.string().max(25, \"Must be 25 characters or less\").required(\"Required\"),\n                        password: Yup.string().required(\"Required\"),\n                        age: Yup.number().required(\"Required\").min(10, \"At least 10\"),\n                        specialization: Yup.string().max(100, \"Must be 100 characters or less\").required(\"Required\"),\n                        qualification: Yup.string().max(100, \"Must be 100 characters or less\").required(\"Required\"),\n                        exp: Yup.number().min(0, \"Must be 0 characters or more\").required(\"Required\")\n                      }),\n                      children: /*#__PURE__*/_jsxDEV(Form, {\n                        children: [/*#__PURE__*/_jsxDEV(MyTextInput, {\n                          label: \"Phone\",\n                          name: \"phone\",\n                          type: \"string\",\n                          value: userInfo.phone\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 119,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n                          label: \"Password\",\n                          name: \"password\",\n                          type: \"password\",\n                          value: userInfo.password\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 125,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n                          label: \"Full Name\",\n                          name: \"fullName\",\n                          type: \"text\",\n                          value: userInfo.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 131,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n                          label: \"Age\",\n                          name: \"age\",\n                          type: \"number\",\n                          value: userInfo.age\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 137,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n                          label: \"Specialization\",\n                          name: \"specialization\",\n                          type: \"text\",\n                          value: userInfo.specialization\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 144,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n                          label: \"Qualification\",\n                          name: \"qualification\",\n                          type: \"text\",\n                          placeholder: userInfo.qualification\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 151,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(MyTextInput, {\n                          label: \"Year(s) of experience\",\n                          name: \"yearofexperience\",\n                          type: \"number\",\n                          placeholder: userInfo.exp\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 158,\n                          columnNumber: 27\n                        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                          type: \"submit\",\n                          className: \"signupbutton\",\n                          children: \"Update\"\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 165,\n                          columnNumber: 27\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 118,\n                        columnNumber: 25\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 23\n                    }, this)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 79,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(InforForForEmployee, \"ipuUQjQS0NMozin3B0shsw6dgsc=\", false, function () {\n  return [useNavigate];\n});\n\n_c = InforForForEmployee;\n\nvar _c;\n\n$RefreshReg$(_c, \"InforForForEmployee\");","map":{"version":3,"sources":["/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/InfoForEmployee.js"],"names":["Formik","Form","useField","Yup","useNavigate","HeaderForEmployee","React","useState","useEffect","InforForForEmployee","navigate","getUserID","userInfo","setUserInfo","endPoint","loggedInUser","localStorage","getItem","console","log","load","fetch","method","headers","then","response","json","data","MyTextInput","label","props","field","meta","id","name","touched","error","password","age","phone","specialization","qualification","exp","object","string","max","required","number","min"],"mappings":"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","sourcesContent":["import { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../../style/SignUp.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport HeaderForEmployee from \"./HeaderForEmployee\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default function InforForForEmployee() {\n  let navigate = useNavigate();\n  useEffect(() => getUserID(), []);\n  const [userInfo, setUserInfo] = useState({});\n  const endPoint = \"https://bringmoneytomom.herokuapp.com/employee/\";\n\n  const getUserID = async () => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    console.log(\"User id... :\" + loggedInUser);\n  };\n\n  const load = () => {\n    fetch(endPoint + localStorage.getItem(\"user\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setUserInfo(data);\n        console.log(userInfo);\n      });\n  };\n\n  useEffect(() => {\n    load();\n    setUserInfo(userInfo);\n  }, []);\n\n  // useEffect(() => {\n  //   setUserInfo(userInfo);\n  // }, [userInfo]);\n\n  const MyTextInput = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return (\n      <div class=\"d-flex flex-row align-items-center mb-4\">\n        <div class=\"form-outline flex-fill mb-0\">\n          <label class=\"form-label\" htmlFor={props.id || props.name}>\n            {label}\n          </label>\n          <input\n            className=\"text-input\"\n            class=\"form-control\"\n            {...field}\n            {...props}\n          />\n          {meta.touched && meta.error ? (\n            <div className=\"error\">{meta.error}</div>\n          ) : null}\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div className=\"screen\">\n      <section class=\"vh-100\">\n        <div class=\"container h-100\">\n          <div>\n            {\" \"}\n            <HeaderForEmployee />\n          </div>\n          <div class=\"row d-flex justify-content-center align-items-center h-100\">\n            <div class=\"col-lg-12 col-xl-11\">\n              <div class=\"card text-black\">\n                <div class=\"card-body p-md-3\">\n                  <div class=\"row justify-content-center\">\n                    <div class=\"col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1\">\n                      <p class=\"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\">\n                        Information\n                      </p>\n                      <Formik\n                        class=\"mx-1 mx-md-4\"\n                        initialValues={{\n                          name: \"\",\n                          password: \"\",\n                          age: \"\",\n                          phone: \"\",\n                          specialization: \"\",\n                          qualification: \"\",\n                          exp: \"\",\n                        }}\n                        // Check validation of each attribute\n                        validationSchema={Yup.object({\n                          name: Yup.string()\n                            .max(30, \"Must be 30 characters or less\")\n                            .required(\"Required\"),\n                          phone: Yup.string()\n                            .max(25, \"Must be 25 characters or less\")\n                            .required(\"Required\"),\n                          password: Yup.string().required(\"Required\"),\n                          age: Yup.number()\n                            .required(\"Required\")\n                            .min(10, \"At least 10\"),\n                          specialization: Yup.string()\n                            .max(100, \"Must be 100 characters or less\")\n                            .required(\"Required\"),\n                          qualification: Yup.string()\n                            .max(100, \"Must be 100 characters or less\")\n                            .required(\"Required\"),\n                          exp: Yup.number()\n                            .min(0, \"Must be 0 characters or more\")\n                            .required(\"Required\"),\n                        })}\n                      >\n                        <Form>\n                          <MyTextInput\n                            label=\"Phone\"\n                            name=\"phone\"\n                            type=\"string\"\n                            value={userInfo.phone}\n                          />\n                          <MyTextInput\n                            label=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            value={userInfo.password}\n                          />\n                          <MyTextInput\n                            label=\"Full Name\"\n                            name=\"fullName\"\n                            type=\"text\"\n                            value={userInfo.name}\n                          />\n                          <MyTextInput\n                            label=\"Age\"\n                            name=\"age\"\n                            type=\"number\"\n                            value={userInfo.age}\n                          />\n\n                          <MyTextInput\n                            label=\"Specialization\"\n                            name=\"specialization\"\n                            type=\"text\"\n                            value={userInfo.specialization}\n                          />\n\n                          <MyTextInput\n                            label=\"Qualification\"\n                            name=\"qualification\"\n                            type=\"text\"\n                            placeholder={userInfo.qualification}\n                          />\n\n                          <MyTextInput\n                            label=\"Year(s) of experience\"\n                            name=\"yearofexperience\"\n                            type=\"number\"\n                            placeholder={userInfo.exp}\n                          />\n\n                          <button type=\"submit\" className=\"signupbutton\">\n                            Update\n                          </button>\n                        </Form>\n                      </Formik>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}