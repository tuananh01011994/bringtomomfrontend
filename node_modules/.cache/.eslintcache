[{"/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/index.js":"1","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/App.js":"2","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/reportWebVitals.js":"3","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/SignIn.js":"4","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/SignUpForEmployee.js":"5","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/SignUpForEmployer.js":"6","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/InfoForEmployee.js":"7","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/InfoForEmployer.js":"8","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/HeaderForEmployee.js":"9","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/HomeForEmployee.js":"10","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/HomeForEmployer.js":"11","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/HeaderForEmployer.js":"12","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/SubJobForEmployee.js":"13","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/AddJobForEmployer.js":"14"},{"size":655,"mtime":1642169344390,"results":"15","hashOfConfig":"16"},{"size":1635,"mtime":1642248078281,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":1642135032578,"results":"18","hashOfConfig":"16"},{"size":6674,"mtime":1642255165983,"results":"19","hashOfConfig":"16"},{"size":7669,"mtime":1642255160694,"results":"20","hashOfConfig":"16"},{"size":5711,"mtime":1642255165224,"results":"21","hashOfConfig":"16"},{"size":6562,"mtime":1642255159300,"results":"22","hashOfConfig":"16"},{"size":4916,"mtime":1642255164214,"results":"23","hashOfConfig":"16"},{"size":5379,"mtime":1642255157967,"results":"24","hashOfConfig":"16"},{"size":2380,"mtime":1642255158593,"results":"25","hashOfConfig":"16"},{"size":2379,"mtime":1642255163539,"results":"26","hashOfConfig":"16"},{"size":5703,"mtime":1642255162891,"results":"27","hashOfConfig":"16"},{"size":3256,"mtime":1642255161365,"results":"28","hashOfConfig":"16"},{"size":6015,"mtime":1642255162392,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"1xryis1",{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"33"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"33"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"33"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"33"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"33"},"/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/index.js",["70"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"bootstrap/dist/js/bootstrap.bundle.min.js\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport axios from \"axios\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["71","72"],"/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/App.js",["73"],"import { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport axios from \"axios\";\nimport SignIn from \"./components/SignIn\";\nimport SignUpForEmployee from \"./components/employee/SignUpForEmployee\";\nimport SignUpForEmployer from \"./components/employer/SignUpForEmployer\";\nimport InfoForEmployee from \"./components/employee/InfoForEmployee\";\nimport InfoForEmployer from \"./components/employer/InfoForEmployer\";\nimport HomeForEmployee from \"./components/employee/HomeForEmployee\";\nimport HomeForEmployer from \"./components/employer/HomeForEmployer\";\nimport SubJobForEmployee from \"./components/employee/SubJobForEmployee\";\nimport AddJobForEmployer from \"./components/employer/AddJobForEmployer\";\n\nfunction App() {\n  return (\n    <div>\n      <div className=\"container\">\n        <BrowserRouter>\n          <Routes>\n            <Route path=\"/\" element={<SignIn />} />\n            <Route path=\"/signupforemployee\" element={<SignUpForEmployee />} />\n            <Route path=\"/signupforemployer\" element={<SignUpForEmployer />} />\n            <Route path=\"/infoforemployee\" element={<InfoForEmployee />} />\n            <Route path=\"/infoforemployer\" element={<InfoForEmployer />} />\n            <Route path=\"/homeforemployee\" element={<HomeForEmployee />} />\n            <Route path=\"/homeforemployer\" element={<HomeForEmployer />} />\n            <Route path=\"/addjobforemployer\" element={<AddJobForEmployer />} />\n            <Route\n              path=\"/subjobforemployee/:id\"\n              element={<SubJobForEmployee />}\n            />\n          </Routes>\n        </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/reportWebVitals.js",[],"/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/SignIn.js",["74","75","76","77","78","79","80","81"],"import { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../style/SignIn.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default function SignIn() {\n  let navigate = useNavigate();\n  const [phone, setPhone] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [user, setUser] = useState();\n  const [role, setRole] = useState();\n\n  async function handleSubmit(phone, password) {\n    const user = { phone, password };\n    // send the username and password to the server\n    const response = await axios.get(\n      \"https://bringmoneytomom.herokuapp.com/login/\" + phone + \"/\" + password\n    );\n    // set the state of the user\n\n    var dataArray = response.data.split(\",\");\n    console.log(dataArray);\n    console.log(dataArray[0]);\n    console.log(dataArray[1]);\n    setUser(dataArray[0]);\n    setRole(dataArray[1]);\n    // store the user in localStorage\n    localStorage.setItem(\"user\", dataArray[0]);\n    console.log(response.data);\n    console.log(\n      \"https://bringmoneytomom.herokuapp.com/login/\" + phone + \"/\" + password\n    );\n  }\n\n  console.log(role);\n  if (user === \"Incorrect phone/account\") {\n    alert(\"Incorrect account\");\n  } else if (user === \"Incorrect Password\") {\n    alert(\"Incorrect Password\");\n  } else if (role === \"employee\") {\n    navigate(\"/homeforemployee\");\n  } else if (role === \"employer\") {\n    navigate(\"/homeforemployer\");\n  }\n\n  useEffect(() => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    if (loggedInUser) {\n      const foundUser = JSON.parse(loggedInUser);\n      setUser(foundUser);\n    }\n  }, []);\n\n  const MyTextInput = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return (\n      <div class=\"d-flex flex-row align-items-center mb-4\">\n        <div class=\"form-outline flex-fill mb-0\">\n          <label class=\"form-label\" htmlFor={props.id || props.name}>\n            {label}\n          </label>\n          <input\n            className=\"text-input\"\n            class=\"form-control\"\n            {...field}\n            {...props}\n          />\n          {meta.touched && meta.error ? (\n            <div className=\"error\">{meta.error}</div>\n          ) : null}\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div className=\"screen\">\n      <section class=\"vh-100\">\n        <div class=\"container h-100\">\n          <div class=\"row d-flex justify-content-center align-items-center h-100\">\n            <div class=\"col-lg-12 col-xl-11\">\n              <div class=\"card text-black\">\n                <div class=\"card-body p-md-3\">\n                  <div class=\"row justify-content-center\">\n                    <div class=\"col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1\">\n                      <p class=\"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\">\n                        Sign in\n                      </p>\n                      <Formik\n                        class=\"mx-1 mx-md-4\"\n                        initialValues={{\n                          phone: \"\",\n                          password: \"\",\n                        }}\n                        // Check validation of each attribute\n                        validationSchema={Yup.object({\n                          phone: Yup.string()\n                            .min(10, \"Must be 10-11 characters\")\n                            .max(11, \"Must be 10-11 characters\")\n                            .required(\"Required\"),\n                          password: Yup.string().required(\"Required\"),\n                        })}\n                        onSubmit={(values) => {\n                          handleSubmit(values.phone, values.password);\n                          console.log(values);\n                        }}\n                      >\n                        <Form>\n                          <MyTextInput\n                            label=\"Phone\"\n                            name=\"phone\"\n                            type=\"string\"\n                            placeholder=\"090123123\"\n                          />\n\n                          <MyTextInput\n                            label=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"*********\"\n                          />\n                          <div class=\"forgot\">\n                            <button type=\"submit\" className=\"signinbutton\">\n                              Sign in\n                            </button>\n\n                            <p className=\"signin\">\n                              <p class=\" text-muted\">\n                                Don't have an account ?{\" \"}\n                              </p>\n                            </p>\n                            <p className=\"signupcenter\">\n                              <p class=\" text-muted\">\n                                <a\n                                  href=\"\"\n                                  class=\"button\"\n                                  onClick={() => {\n                                    navigate(\"/signupforemployee\");\n                                  }}\n                                >\n                                  Sign up for employee\n                                </a>\n                              </p>\n                            </p>\n\n                            <p className=\"signupcenter\">\n                              <p class=\" text-muted\">\n                                <a>OR</a>\n                              </p>\n                            </p>\n                            <p className=\"signupcenter\">\n                              <p class=\" text-muted\">\n                                <a\n                                  href=\"\"\n                                  class=\"button\"\n                                  onClick={() => {\n                                    navigate(\"/signupforemployer\");\n                                  }}\n                                >\n                                  Sign up for employer\n                                </a>\n                              </p>\n                            </p>\n                          </div>\n                        </Form>\n                      </Formik>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/SignUpForEmployee.js",["82","83","84","85","86","87","88"],"/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/SignUpForEmployer.js",["89","90","91","92","93"],"import { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../../style/SignUp.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default function SignUpForEmployer() {\n  let navigate = useNavigate();\n  const [user, setUser] = useState();\n\n  async function handleSubmit(address, name, password, phone) {\n    fetch(\"https://bringmoneytomom.herokuapp.com/employer\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        address: address,\n        name: name,\n        password: password,\n        phone: phone,\n      }),\n    }).then((data) => console.log(data + \"post...\"));\n    navigate(\"/\");\n  }\n  const MyTextInput = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return (\n      <div class=\"d-flex flex-row align-items-center mb-4\">\n        <div class=\"form-outline flex-fill mb-0\">\n          <label class=\"form-label\" htmlFor={props.id || props.name}>\n            {label}\n          </label>\n          <input\n            className=\"text-input\"\n            class=\"form-control\"\n            {...field}\n            {...props}\n          />\n          {meta.touched && meta.error ? (\n            <div className=\"error\">{meta.error}</div>\n          ) : null}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"screen\">\n      <section class=\"vh-100\">\n        <div class=\"container h-100\">\n          <div class=\"row d-flex justify-content-center align-items-center h-100\">\n            <div class=\"col-lg-12 col-xl-11\">\n              <div class=\"card text-black\">\n                <div class=\"card-body p-md-3\">\n                  <div class=\"row justify-content-center\">\n                    <div class=\"col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1\">\n                      <p class=\"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\">\n                        Sign up for employer\n                      </p>\n                      <Formik\n                        class=\"mx-1 mx-md-4\"\n                        initialValues={{\n                          name: \"\",\n                          password: \"\",\n\n                          phone: \"\",\n                          address: \"\",\n                        }}\n                        // Check validation of each attribute\n                        validationSchema={Yup.object({\n                          name: Yup.string()\n                            .max(30, \"Must be 30 characters or less\")\n                            .required(\"Required\"),\n                          phone: Yup.string()\n                            .max(25, \"Must be 25 characters or less\")\n                            .required(\"Required\"),\n                          password: Yup.string().required(\"Required\"),\n\n                          address: Yup.string()\n                            .max(100, \"Must be 100 characters or less\")\n                            .required(\"Required\"),\n                        })}\n                        onSubmit={(values) => {\n                          handleSubmit(\n                            values.address,\n                            values.name,\n\n                            values.password,\n                            values.phone\n                          );\n                          console.log(values);\n                        }}\n                      >\n                        <Form>\n                          <MyTextInput\n                            label=\"Phone\"\n                            name=\"phone\"\n                            type=\"string\"\n                            placeholder=\"090123123\"\n                          />\n                          <MyTextInput\n                            label=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            placeholder=\"*********\"\n                          />\n                          <MyTextInput\n                            label=\"Company Name\"\n                            name=\"name\"\n                            type=\"text\"\n                            placeholder=\"KMS Technology\"\n                          />\n\n                          <MyTextInput\n                            label=\"Address\"\n                            name=\"address\"\n                            type=\"text\"\n                            placeholder=\"A1 Nguyen Van Troi Street, Dictrict 3, HCM City\"\n                          />\n\n                          <button type=\"submit\" className=\"signupbutton\">\n                            Sign up\n                          </button>\n\n                          <p className=\"bottom\">\n                            <p class=\" text-muted\">\n                              Already have account ?{\" \"}\n                              <a\n                                href=\"\"\n                                class=\"button\"\n                                onClick={() => {\n                                  navigate(\"/\");\n                                }}\n                              >\n                                Sign in\n                              </a>\n                            </p>\n                          </p>\n                        </Form>\n                      </Formik>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/InfoForEmployee.js",["94","95"],"import { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../../style/SignUp.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport HeaderForEmployee from \"./HeaderForEmployee\";\nimport React, { useState, useEffect } from \"react\";\n\nexport default function InforForForEmployee() {\n  let navigate = useNavigate();\n  useEffect(() => getUserID(), []);\n  const [userInfo, setUserInfo] = useState({});\n  const endPoint = \"https://bringmoneytomom.herokuapp.com/employee/\";\n\n  const getUserID = async () => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    console.log(\"User id... :\" + loggedInUser);\n  };\n\n  const load = () => {\n    fetch(endPoint + localStorage.getItem(\"user\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setUserInfo(data);\n        console.log(userInfo);\n      });\n  };\n\n  useEffect(() => {\n    load();\n    setUserInfo(userInfo);\n  }, []);\n\n  // useEffect(() => {\n  //   setUserInfo(userInfo);\n  // }, [userInfo]);\n\n  const MyTextInput = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return (\n      <div class=\"d-flex flex-row align-items-center mb-4\">\n        <div class=\"form-outline flex-fill mb-0\">\n          <label class=\"form-label\" htmlFor={props.id || props.name}>\n            {label}\n          </label>\n          <input\n            className=\"text-input\"\n            class=\"form-control\"\n            {...field}\n            {...props}\n          />\n          {meta.touched && meta.error ? (\n            <div className=\"error\">{meta.error}</div>\n          ) : null}\n        </div>\n      </div>\n    );\n  };\n  return (\n    <div className=\"screen\">\n      <section class=\"vh-100\">\n        <div class=\"container h-100\">\n          <div>\n            {\" \"}\n            <HeaderForEmployee />\n          </div>\n          <div class=\"row d-flex justify-content-center align-items-center h-100\">\n            <div class=\"col-lg-12 col-xl-11\">\n              <div class=\"card text-black\">\n                <div class=\"card-body p-md-3\">\n                  <div class=\"row justify-content-center\">\n                    <div class=\"col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1\">\n                      <p class=\"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\">\n                        Information\n                      </p>\n                      <Formik\n                        class=\"mx-1 mx-md-4\"\n                        initialValues={{\n                          name: \"\",\n                          password: \"\",\n                          age: \"\",\n                          phone: \"\",\n                          specialization: \"\",\n                          qualification: \"\",\n                          exp: \"\",\n                        }}\n                        // Check validation of each attribute\n                        validationSchema={Yup.object({\n                          name: Yup.string()\n                            .max(30, \"Must be 30 characters or less\")\n                            .required(\"Required\"),\n                          phone: Yup.string()\n                            .max(25, \"Must be 25 characters or less\")\n                            .required(\"Required\"),\n                          password: Yup.string().required(\"Required\"),\n                          age: Yup.number()\n                            .required(\"Required\")\n                            .min(10, \"At least 10\"),\n                          specialization: Yup.string()\n                            .max(100, \"Must be 100 characters or less\")\n                            .required(\"Required\"),\n                          qualification: Yup.string()\n                            .max(100, \"Must be 100 characters or less\")\n                            .required(\"Required\"),\n                          exp: Yup.number()\n                            .min(0, \"Must be 0 characters or more\")\n                            .required(\"Required\"),\n                        })}\n                      >\n                        <Form>\n                          <MyTextInput\n                            label=\"Phone\"\n                            name=\"phone\"\n                            type=\"string\"\n                            value={userInfo.phone}\n                          />\n                          <MyTextInput\n                            label=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            value={userInfo.password}\n                          />\n                          <MyTextInput\n                            label=\"Full Name\"\n                            name=\"fullName\"\n                            type=\"text\"\n                            value={userInfo.name}\n                          />\n                          <MyTextInput\n                            label=\"Age\"\n                            name=\"age\"\n                            type=\"number\"\n                            value={userInfo.age}\n                          />\n\n                          <MyTextInput\n                            label=\"Specialization\"\n                            name=\"specialization\"\n                            type=\"text\"\n                            value={userInfo.specialization}\n                          />\n\n                          <MyTextInput\n                            label=\"Qualification\"\n                            name=\"qualification\"\n                            type=\"text\"\n                            placeholder={userInfo.qualification}\n                          />\n\n                          <MyTextInput\n                            label=\"Year(s) of experience\"\n                            name=\"yearofexperience\"\n                            type=\"number\"\n                            placeholder={userInfo.exp}\n                          />\n\n                          <button type=\"submit\" className=\"signupbutton\">\n                            Update\n                          </button>\n                        </Form>\n                      </Formik>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/InfoForEmployer.js",["96","97","98"],"import { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../../style/SignUp.css\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport React, { useState, useEffect } from \"react\";\nimport HeaderForEmployer from \"./HeaderForEmployer\";\n\nexport default function InfoForEmployer() {\n  let navigate = useNavigate();\n  const [userInfo, setUserInfo] = useState({});\n  const endPoint = \"https://bringmoneytomom.herokuapp.com/employer/\";\n\n  const load = () => {\n    fetch(endPoint + localStorage.getItem(\"user\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setUserInfo(data);\n        console.log(userInfo);\n      });\n  };\n\n  useEffect(() => {\n    load();\n    setUserInfo(userInfo);\n  }, []);\n  const MyTextInput = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return (\n      <div class=\"d-flex flex-row align-items-center mb-4\">\n        <div class=\"form-outline flex-fill mb-0\">\n          <label class=\"form-label\" htmlFor={props.id || props.name}>\n            {label}\n          </label>\n          <input\n            className=\"text-input\"\n            class=\"form-control\"\n            {...field}\n            {...props}\n          />\n          {meta.touched && meta.error ? (\n            <div className=\"error\">{meta.error}</div>\n          ) : null}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"screen\">\n      <section class=\"vh-100\">\n        <div class=\"container h-100\">\n          <div>\n            {\" \"}\n            <HeaderForEmployer />\n          </div>\n          <div class=\"row d-flex justify-content-center align-items-center h-100\">\n            <div class=\"col-lg-12 col-xl-11\">\n              <div class=\"card text-black\">\n                <div class=\"card-body p-md-3\">\n                  <div class=\"row justify-content-center\">\n                    <div class=\"col-md-10 col-lg-6 col-xl-5 order-2 order-lg-1\">\n                      <p class=\"text-center h1 fw-bold mb-5 mx-1 mx-md-4 mt-4\">\n                        Information\n                      </p>\n                      <Formik\n                        class=\"mx-1 mx-md-4\"\n                        initialValues={{\n                          companytName: \"\",\n                          password: \"\",\n\n                          phone: \"\",\n                          address: \"\",\n                        }}\n                        // Check validation of each attribute\n                        validationSchema={Yup.object({\n                          name: Yup.string()\n                            .max(30, \"Must be 30 characters or less\")\n                            .required(\"Required\"),\n                          phone: Yup.string()\n                            .max(25, \"Must be 25 characters or less\")\n                            .required(\"Required\"),\n                          password: Yup.string().required(\"Required\"),\n\n                          address: Yup.string()\n                            .max(100, \"Must be 100 characters or less\")\n                            .required(\"Required\"),\n                        })}\n                      >\n                        <Form>\n                          <MyTextInput\n                            label=\"Phone\"\n                            name=\"phone\"\n                            type=\"string\"\n                            value={userInfo.phone}\n                          />\n                          <MyTextInput\n                            label=\"Password\"\n                            name=\"password\"\n                            type=\"password\"\n                            value={userInfo.password}\n                          />\n                          <MyTextInput\n                            label=\"Company Name\"\n                            name=\"name\"\n                            type=\"text\"\n                            value={userInfo.name}\n                          />\n\n                          <MyTextInput\n                            label=\"Address\"\n                            name=\"address\"\n                            type=\"text\"\n                            value={userInfo.address}\n                          />\n\n                          <button type=\"submit\" className=\"signupbutton\">\n                            Update\n                          </button>\n                        </Form>\n                      </Formik>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/HeaderForEmployee.js",["99","100","101","102","103","104"],"import React, { useState, useEffect } from \"react\";\nimport \"../../style/Header.css\";\nimport logo from \"../../image/logo.jpg\";\nimport { Link } from \"react-router-dom\";\n\nimport { useNavigate } from \"react-router-dom\";\n\nexport default function HeaderForEmployee() {\n  let navigate = useNavigate();\n  const [userInfo, setUserInfo] = useState({});\n  const [job, setJob] = useState({});\n\n  const endPoint = \"https://bringmoneytomom.herokuapp.com/employee/\";\n  const endPoint1 = \"https://bringmoneytomom.herokuapp.com/jobcategory\";\n\n  const load = () => {\n    fetch(endPoint + localStorage.getItem(\"user\"), {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setUserInfo(data);\n        console.log(userInfo);\n      });\n  };\n\n  useEffect(() => {\n    load();\n    setUserInfo(userInfo);\n  }, []);\n\n  const getJob = () => {\n    fetch(endPoint1, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setJob(data);\n        console.log(job);\n      });\n  };\n\n  useEffect(() => {\n    getJob();\n  }, []);\n\n  const handleLogout = () => {\n    localStorage.clear();\n    navigate(\"/\");\n  };\n\n  useEffect(() => getUserID(), []);\n  const getUserID = async () => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    console.log(\"User id... :\" + loggedInUser);\n  };\n\n  const showSubJob = (id) => {\n    console.log(id + \"job id\");\n    navigate(\"/subjobforemployee/\" + id);\n    window.location.reload(false);\n  };\n\n  return (\n    <>\n      <div\n        className=\"gradient-custom\"\n        style={{\n          padding: 16,\n          paddingBottom: 0,\n          paddingTop: 8,\n        }}\n      >\n        <div\n          class=\"row\"\n          style={{\n            paddingBottom: 8,\n            borderBottom: \"2px solid thistle\",\n          }}\n        >\n          <div class=\"col header-column\">\n            <button className=\"contact\">Contact</button>\n          </div>\n\n          <div class=\"col header-column\">\n            <a>\n              <button\n                className=\"username\"\n                onClick={() => {\n                  navigate(\"/infoforemployee\");\n                }}\n              >\n                <i\n                  class=\"bi bi-person\"\n                  style={{ marginRight: 5, fontSize: 20 }}\n                ></i>\n                {userInfo.name}\n              </button>\n            </a>\n          </div>\n          <div class=\"col header-column\">\n            <button onClick={handleLogout}>logout</button>\n          </div>\n        </div>\n        <div class=\"row\" style={{ padding: 16 }}>\n          <div\n            class=\"col\"\n            style={{\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n            }}\n          >\n            <img\n              src={logo}\n              style={{ height: 100, width: 100 }}\n              class=\"rounded-circle\"\n              alt=\"100x100\"\n              onClick={() => {\n                navigate(\"/homeforemployee\");\n              }}\n            />\n\n            <form style={{ width: \"100%\" }}>\n              <div\n                class=\"input-group\"\n                style={{ paddingRight: 16, paddingLeft: 16 }}\n              >\n                <input\n                  type=\"search\"\n                  class=\"form-control rounded\"\n                  placeholder=\"Search\"\n                  aria-label=\"Search\"\n                  aria-describedby=\"search-addon\"\n                  placeholder=\"Search products...\"\n                  id=\"search\"\n                />\n                <button\n                  type=\"submit\"\n                  class=\"btn btn-primary\"\n                  style={{\n                    backgroundColor: \"rgba(196, 113, 245, 1)\",\n                    color: \"white\",\n                    borderColor: \"rgba(196, 113, 245, 1)\",\n                  }}\n                >\n                  <i class=\"bi-search\" size=\"10x\"></i>\n                </button>\n              </div>\n            </form>\n            <button\n              type=\"button\"\n              class=\"btn btn-primary\"\n              style={{\n                backgroundColor: \"rgba(196, 113, 245, 1)\",\n                color: \"white\",\n                borderColor: \"rgba(196, 113, 245, 1)\",\n              }}\n              //   onClick={() => navigate(\"/cart\")}\n            >\n              <i class=\"bi bi-cart4\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n      <div\n        style={{\n          paddingLeft: 8,\n          paddingRight: 8,\n        }}\n      >\n        <ul\n          class=\"nav nav-tabs\"\n          style={{\n            paddingLeft: 32,\n          }}\n        >\n          {/* {job.map((job) => (\n            <li class=\"nav-item\">\n              <li class=\"nav-item dropdown\" key={job.id}>\n                <a\n                  key={job.id}\n                  class=\"nav-link dropdown-toggle\"\n                  role=\"button\"\n                  aria-expanded=\"false\"\n                  onClick={() => showSubJob(job.id)}\n                >\n                  {job.name}\n                </a>\n              </li>\n            </li>\n          ))} */}\n        </ul>\n      </div>\n    </>\n  );\n}\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/HomeForEmployee.js",["105","106","107","108"],"import React, { useState, useEffect } from \"react\";\nimport HeaderForEmployee from \"./HeaderForEmployee\";\n\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nexport default function HomeForEmployee() {\n  return (\n    <div class=\".container-fluid\">\n      <div>\n        <HeaderForEmployee />\n      </div>\n\n      <div class=\"row\" style={{ width: 800, paddingLeft: 50 }}>\n        <div class=\"col\">\n          <a\n            style={{\n              fontSize: 22,\n              textDecoration: \"none\",\n              color: \"black\",\n              fontWeight: \"bold\",\n            }}\n            href=\"url\"\n          >\n            Popular Jobs\n          </a>\n        </div>\n      </div>\n      <br />\n      <div class=\"row\" style={{ paddingLeft: 100 }}>\n        {/* {category.map((category) => (\n          <div class=\"col\">\n            <div class=\"row\" key={category.category_id}>\n              <img\n                style={{ height: 200, width: 200 }}\n                class=\"rounded-circle\"\n                alt=\"100x100\"\n                src={category.imgUrl}\n              ></img>\n              <a style={{ paddingLeft: 50 }}>{category.category_name}</a>\n            </div>\n          </div>\n        ))} */}\n      </div>\n      <br />\n      <br />\n\n      {/* <div class=\"row\" style={{ width: 800, paddingLeft: 50 }}>\n        <div class=\"col\">\n          <a\n            style={{\n              fontSize: 22,\n              textDecoration: \"none\",\n              color: \"black\",\n              fontWeight: \"bold\",\n            }}\n            href=\"url\"\n          >\n            Explore Popular Products\n          </a>\n        </div>\n      </div>\n      <br />\n      <div class=\"row\" style={{ paddingLeft: 100 }}> */}\n      {/* {products.map((product) => (\n          <div class=\"col\">\n            <div\n              class=\"row\"\n              key={product.product_id}\n              onClick={() => {\n                navigate(\"/product/\" + product.product_id);\n              }}\n            >\n              <img\n                style={{ height: 200, width: 200 }}\n                class=\"rounded-circle\"\n                alt=\"100x100\"\n                src={product.img_url}\n              ></img>\n              <a style={{ paddingLeft: 50 }}>{product.product_name}</a>\n            </div>\n          </div>\n        ))} */}\n      {/* </div> */}\n\n      <div style={{ marginTop: 50 }}></div>\n    </div>\n  );\n}\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/HomeForEmployer.js",["109","110","111","112"],"import React, { useState, useEffect } from \"react\";\nimport HeaderForEmployer from \"./HeaderForEmployer\";\n\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nexport default function HomeForEmployer() {\n  return (\n    <div class=\".container-fluid\">\n      <div>\n        <HeaderForEmployer />\n      </div>\n\n      <div class=\"row\" style={{ width: 800, paddingLeft: 50 }}>\n        <div class=\"col\">\n          <a\n            style={{\n              fontSize: 22,\n              textDecoration: \"none\",\n              color: \"black\",\n              fontWeight: \"bold\",\n            }}\n            href=\"url\"\n          >\n            List of job\n          </a>\n        </div>\n      </div>\n      <br />\n      <div class=\"row\" style={{ paddingLeft: 100 }}>\n        {/* {category.map((category) => (\n          <div class=\"col\">\n            <div class=\"row\" key={category.category_id}>\n              <img\n                style={{ height: 200, width: 200 }}\n                class=\"rounded-circle\"\n                alt=\"100x100\"\n                src={category.imgUrl}\n              ></img>\n              <a style={{ paddingLeft: 50 }}>{category.category_name}</a>\n            </div>\n          </div>\n        ))} */}\n      </div>\n      <br />\n      <br />\n\n      {/* <div class=\"row\" style={{ width: 800, paddingLeft: 50 }}>\n        <div class=\"col\">\n          <a\n            style={{\n              fontSize: 22,\n              textDecoration: \"none\",\n              color: \"black\",\n              fontWeight: \"bold\",\n            }}\n            href=\"url\"\n          >\n            Explore Popular Products\n          </a>\n        </div>\n      </div>\n      <br />\n      <div class=\"row\" style={{ paddingLeft: 100 }}> */}\n      {/* {products.map((product) => (\n          <div class=\"col\">\n            <div\n              class=\"row\"\n              key={product.product_id}\n              onClick={() => {\n                navigate(\"/product/\" + product.product_id);\n              }}\n            >\n              <img\n                style={{ height: 200, width: 200 }}\n                class=\"rounded-circle\"\n                alt=\"100x100\"\n                src={product.img_url}\n              ></img>\n              <a style={{ paddingLeft: 50 }}>{product.product_name}</a>\n            </div>\n          </div>\n        ))} */}\n      {/* </div> */}\n\n      <div style={{ marginTop: 50 }}></div>\n    </div>\n  );\n}\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/HeaderForEmployer.js",["113","114","115","116","117"],"/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employee/SubJobForEmployee.js",["118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133"],"import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport HeaderForEmployee from \"./HeaderForEmployee\";\n\n// render products data when we search or sort products or do nothing(display all products)\nconst renderData = (job, navigate) => {\n  return (\n    <div class=\"row g-1 \">\n      {job.map((job) => (\n        <div class=\"col-md-3\">\n          <div\n            class=\"card-deck card p-3\"\n            style={{ height: 210 }}\n            key={job.id}\n            // onClick={() => {\n            //   navigate(\"/product/\" + product.product_id);\n            // }}\n          >\n            <div class=\"card-body\">\n              <h5 class=\"card-title\" style={{ textAlign: \"start\" }}>\n                Title: {job.title}\n              </h5>\n              <h5 class=\"card-title\" style={{ textAlign: \"start\" }}>\n                Salary: {job.salaryRange}\n              </h5>\n              <h5 class=\"card-title\" style={{ textAlign: \"start\" }}>\n                Specialization: {job.specialization}\n              </h5>\n              <h5 class=\"card-title\" style={{ textAlign: \"start\" }}>\n                Description: {job.description}\n                <h5 class=\"card-title\" style={{ textAlign: \"start\" }}>\n                  Level: {job.level}\n                  <h5 class=\"card-title\" style={{ textAlign: \"start\" }}>\n                    Location: {job.location}\n                  </h5>\n                </h5>\n              </h5>\n            </div>\n          </div>{\" \"}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default function SubJobForEmployee() {\n  // Invoke when user click to request another page.\n  const [pageCount, setpageCount] = useState(1);\n  const [currentPage, setcurrentPage] = useState(0);\n  const [data, setData] = useState([]);\n  const [job, setJob] = useState([]);\n  const [field, setField] = useState(\"\");\n  const [sortType, setsortType] = useState(\"\");\n  const [status, setStatus] = useState(\"idle\");\n  const isIdle = status === \"idle\";\n  const isSort = status === \"sort\";\n  var newArray = [];\n  let { id } = useParams();\n  const endPoint = `https://mlr4fsfb80.execute-api.ap-southeast-1.amazonaws.com/default/managerds/products/?currentPage=${currentPage}&subcategory_id=${id}`;\n  const endPoint1 = `https://mlr4fsfb80.execute-api.ap-southeast-1.amazonaws.com/default/managerds/products/?subcategory_id=${id}&totalproducts`;\n  let limit = 4;\n  let navigate = useNavigate();\n\n  useEffect(() => {\n    console.log(id);\n    // Set the list of all products\n    fetch(`https://bringmoneytomom.herokuapp.com/job/category/` + id)\n      .then((response) => response.json())\n      .then((data) => {\n        setData(data);\n        for (let i = 0; i < data.length; i++) {\n          newArray = newArray.concat(data[i]);\n          console.log(i);\n        }\n        setJob(newArray);\n        console.log(job);\n      });\n  }, []);\n  return (\n    <div\n      className=\".container-fluid\"\n      style={{ paddingLeft: 20, paddingRight: 10 }}\n    >\n      <div style={{ paddingTop: 20 }}>\n        <div style={{ paddingTop: 20 }}>\n          {job?.length ? renderData(job, navigate) : null}\n        </div>\n      </div>\n      <button onClick={() => navigate(\"/homeforemployee\")}></button>\n    </div>\n  );\n}\n","/Users/tuananh/Documents/GitHub/LabTest2_Arch/my-app/src/components/employer/AddJobForEmployer.js",["134","135","136","137","138","139","140","141"],"import { Formik, Form, useField } from \"formik\";\nimport * as Yup from \"yup\";\nimport React, { useState, useEffect } from \"react\";\nimport { useNavigate, useLocation, Link } from \"react-router-dom\";\nimport HeaderForEmployer from \"./HeaderForEmployer\";\nimport \"../../style/AddJobForEmployer.css\";\n\nexport default function AddJobForEmployer() {\n  const [data, setData] = useState([]);\n\n  const [status, setStatus] = useState(\"\");\n  const [job, setJob] = useState({});\n\n  const endPoint1 =\n    \"https://bringmoneytomom.herokuapp.com/job/ \" +\n    localStorage.getItem(\"user\") +\n    \"/\" +\n    job.id;\n\n  const getJob = () => {\n    fetch(endPoint1, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        console.log(data);\n        setJob(data);\n        console.log(job);\n      });\n  };\n\n  useEffect(() => {\n    getJob();\n  }, []);\n\n  useEffect(() => getUserID(), []);\n  const getUserID = async () => {\n    const loggedInUser = localStorage.getItem(\"user\");\n    console.log(\"User id... :\" + loggedInUser);\n  };\n\n  const addProduct = (\n    description,\n    level,\n    location,\n    salary_range,\n    specialization,\n    title,\n    employer_id,\n    jobcategory_id\n  ) => {\n    fetch(endPoint1, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        description: description,\n        level: level,\n        location: location,\n        salaryRange: salary_range,\n        specialization: specialization,\n        title: title,\n        loggedInUser: employer_id,\n        id: jobcategory_id,\n      }),\n    })\n      .then((data) => data.json())\n      .then((response) => {\n        if (response.status === 500) {\n          alert(\"Job exists\");\n        }\n      });\n    // navigate(\"/list-of-seller-product/\");\n  };\n\n  const MyTextInput = ({ label, ...props }) => {\n    // useField() returns [formik.getFieldProps(), formik.getFieldMeta()]\n    // which we can spread on <input>. We can use field meta to show an error\n    // message if the field is invalid and it has been touched (i.e. visited)\n    const [field, meta] = useField(props);\n    return (\n      <>\n        <div class=\"mb-3 mt-3\">\n          <label htmlFor={props.id || props.name}>{label}</label>\n          <input\n            className=\"text-input\"\n            class=\"form-control\"\n            {...field}\n            {...props}\n          />\n          {meta.touched && meta.error ? (\n            <div className=\"error\">{meta.error}</div>\n          ) : null}\n        </div>\n      </>\n    );\n  };\n\n  const MySelect = ({ label, ...props }) => {\n    const [field, meta] = useField(props);\n    return (\n      <div>\n        <label htmlFor={props.id || props.name}>{label}</label>\n        <select class=\"form-control\" {...field} {...props} />\n        {meta.touched && meta.error ? (\n          <div className=\"error\">{meta.error}</div>\n        ) : null}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\".container-fluid\">\n      <div style={{ marginBottom: 50 }}>\n        {\" \"}\n        <HeaderForEmployer />\n      </div>\n      <div class=\"container mt-3\">\n        <div\n          style={{\n            flex: 1,\n            justifyContent: \"center\",\n            textAlign: \"center\",\n          }}\n        >\n          <h1>Add a new job</h1>\n        </div>\n        <Formik\n          initialValues={{\n            title: \"\",\n            salaryRange: \"\",\n            specialization: \"\",\n            description: \"\",\n            level: \"\",\n            location: \"\",\n          }}\n          validationSchema={Yup.object({\n            title: Yup.string()\n              .max(50, \"Must be 50 characters or less\")\n              .required(\"Required\"),\n            salaryRange: Yup.string().required(\"Required\"),\n            specialization: Yup.string().required(\"Required\"),\n            description: Yup.string().required(\"Required\"),\n            level: Yup.string().required(\"Required\"),\n            location: Yup.string().required(\"Required\"),\n          })}\n          onSubmit={(values) => {\n            addProduct(\n              values.description,\n              values.level,\n              values.location,\n              values.salaryRange,\n              values.specialization,\n              values.title\n            );\n          }}\n        >\n          <Form>\n            <MySelect label=\"Categories\" name=\"id\">\n              {/* <option>Select a sub-category type</option>\n              {job.map((job) => (\n                <option key={job.id} value={job.id}>\n                  {job.name}\n                </option>\n              ))} */}\n            </MySelect>\n            <br />\n\n            <MyTextInput\n              label=\"Job Title\"\n              name=\"title\"\n              type=\"text\"\n              placeholder=\"Title\"\n            />\n\n            <MyTextInput\n              label=\"Salary\"\n              name=\"salaryRange\"\n              type=\"text\"\n              placeholder=\"Brand\"\n            />\n\n            <MyTextInput\n              label=\"Specialization\"\n              name=\"specialization\"\n              type=\"text\"\n              placeholder=\"Specialization\"\n            />\n\n            <MyTextInput\n              label=\"Description\"\n              name=\"description\"\n              type=\"text\"\n              placeholder=\"Description\"\n            />\n\n            <MyTextInput\n              label=\"Level\"\n              name=\"level\"\n              type=\"text\"\n              placeholder=\"Level\"\n            />\n            <MyTextInput\n              label=\"Location\"\n              name=\"location\"\n              type=\"text\"\n              placeholder=\"Location\"\n            />\n\n            <br />\n            <div class=\"d-grid gap-2 d-md-flex justify-content-md-center\">\n              <button type=\"submit\" className=\"saveaddproduct\">\n                Add\n              </button>\n            </div>\n          </Form>\n        </Formik>\n      </div>{\" \"}\n      <br /> <br />\n    </div>\n  );\n}\n",{"ruleId":"142","severity":1,"message":"143","line":8,"column":8,"nodeType":"144","messageId":"145","endLine":8,"endColumn":13},{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"142","severity":1,"message":"143","line":2,"column":8,"nodeType":"144","messageId":"145","endLine":2,"endColumn":13},{"ruleId":"142","severity":1,"message":"150","line":10,"column":10,"nodeType":"144","messageId":"145","endLine":10,"endColumn":15},{"ruleId":"142","severity":1,"message":"151","line":10,"column":17,"nodeType":"144","messageId":"145","endLine":10,"endColumn":25},{"ruleId":"142","severity":1,"message":"152","line":11,"column":10,"nodeType":"144","messageId":"145","endLine":11,"endColumn":18},{"ruleId":"142","severity":1,"message":"153","line":11,"column":20,"nodeType":"144","messageId":"145","endLine":11,"endColumn":31},{"ruleId":"142","severity":1,"message":"154","line":16,"column":11,"nodeType":"144","messageId":"145","endLine":16,"endColumn":15},{"ruleId":"155","severity":1,"message":"156","line":138,"column":33,"nodeType":"157","endLine":144,"endColumn":34},{"ruleId":"155","severity":1,"message":"158","line":152,"column":33,"nodeType":"157","endLine":152,"endColumn":36},{"ruleId":"155","severity":1,"message":"156","line":157,"column":33,"nodeType":"157","endLine":163,"endColumn":34},{"ruleId":"142","severity":1,"message":"143","line":5,"column":8,"nodeType":"144","messageId":"145","endLine":5,"endColumn":13},{"ruleId":"142","severity":1,"message":"159","line":6,"column":27,"nodeType":"144","messageId":"145","endLine":6,"endColumn":36},{"ruleId":"142","severity":1,"message":"160","line":10,"column":10,"nodeType":"144","messageId":"145","endLine":10,"endColumn":18},{"ruleId":"142","severity":1,"message":"161","line":10,"column":20,"nodeType":"144","messageId":"145","endLine":10,"endColumn":31},{"ruleId":"162","severity":1,"message":"163","line":170,"column":27,"nodeType":"157","endLine":175,"endColumn":29},{"ruleId":"155","severity":1,"message":"158","line":170,"column":27,"nodeType":"157","endLine":175,"endColumn":29},{"ruleId":"155","severity":1,"message":"156","line":184,"column":31,"nodeType":"157","endLine":190,"endColumn":32},{"ruleId":"142","severity":1,"message":"143","line":5,"column":8,"nodeType":"144","messageId":"145","endLine":5,"endColumn":13},{"ruleId":"142","severity":1,"message":"159","line":6,"column":27,"nodeType":"144","messageId":"145","endLine":6,"endColumn":36},{"ruleId":"142","severity":1,"message":"154","line":10,"column":10,"nodeType":"144","messageId":"145","endLine":10,"endColumn":14},{"ruleId":"142","severity":1,"message":"164","line":10,"column":16,"nodeType":"144","messageId":"145","endLine":10,"endColumn":23},{"ruleId":"155","severity":1,"message":"156","line":133,"column":31,"nodeType":"157","endLine":139,"endColumn":32},{"ruleId":"142","severity":1,"message":"165","line":9,"column":7,"nodeType":"144","messageId":"145","endLine":9,"endColumn":15},{"ruleId":"166","severity":1,"message":"167","line":37,"column":6,"nodeType":"168","endLine":37,"endColumn":8,"suggestions":"169"},{"ruleId":"142","severity":1,"message":"143","line":5,"column":8,"nodeType":"144","messageId":"145","endLine":5,"endColumn":13},{"ruleId":"142","severity":1,"message":"165","line":10,"column":7,"nodeType":"144","messageId":"145","endLine":10,"endColumn":15},{"ruleId":"166","severity":1,"message":"167","line":32,"column":6,"nodeType":"168","endLine":32,"endColumn":8,"suggestions":"170"},{"ruleId":"142","severity":1,"message":"171","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":14},{"ruleId":"166","severity":1,"message":"167","line":34,"column":6,"nodeType":"168","endLine":34,"endColumn":8,"suggestions":"172"},{"ruleId":"166","severity":1,"message":"173","line":53,"column":6,"nodeType":"168","endLine":53,"endColumn":8,"suggestions":"174"},{"ruleId":"142","severity":1,"message":"175","line":66,"column":9,"nodeType":"144","messageId":"145","endLine":66,"endColumn":19},{"ruleId":"155","severity":1,"message":"158","line":94,"column":13,"nodeType":"157","endLine":94,"endColumn":16},{"ruleId":"176","severity":1,"message":"177","line":143,"column":19,"nodeType":"178","messageId":"179","endLine":143,"endColumn":51},{"ruleId":"142","severity":1,"message":"180","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":25},{"ruleId":"142","severity":1,"message":"159","line":1,"column":27,"nodeType":"144","messageId":"145","endLine":1,"endColumn":36},{"ruleId":"142","severity":1,"message":"181","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":19},{"ruleId":"142","severity":1,"message":"182","line":4,"column":21,"nodeType":"144","messageId":"145","endLine":4,"endColumn":32},{"ruleId":"142","severity":1,"message":"180","line":1,"column":17,"nodeType":"144","messageId":"145","endLine":1,"endColumn":25},{"ruleId":"142","severity":1,"message":"159","line":1,"column":27,"nodeType":"144","messageId":"145","endLine":1,"endColumn":36},{"ruleId":"142","severity":1,"message":"181","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":19},{"ruleId":"142","severity":1,"message":"182","line":4,"column":21,"nodeType":"144","messageId":"145","endLine":4,"endColumn":32},{"ruleId":"142","severity":1,"message":"171","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":14},{"ruleId":"142","severity":1,"message":"183","line":11,"column":9,"nodeType":"144","messageId":"145","endLine":11,"endColumn":18},{"ruleId":"166","severity":1,"message":"184","line":43,"column":6,"nodeType":"168","endLine":43,"endColumn":8,"suggestions":"185"},{"ruleId":"155","severity":1,"message":"158","line":77,"column":13,"nodeType":"157","endLine":77,"endColumn":16},{"ruleId":"176","severity":1,"message":"177","line":126,"column":19,"nodeType":"178","messageId":"179","endLine":126,"endColumn":51},{"ruleId":"142","severity":1,"message":"186","line":3,"column":8,"nodeType":"144","messageId":"145","endLine":3,"endColumn":25},{"ruleId":"142","severity":1,"message":"187","line":48,"column":10,"nodeType":"144","messageId":"145","endLine":48,"endColumn":19},{"ruleId":"142","severity":1,"message":"188","line":48,"column":21,"nodeType":"144","messageId":"145","endLine":48,"endColumn":33},{"ruleId":"142","severity":1,"message":"189","line":49,"column":23,"nodeType":"144","messageId":"145","endLine":49,"endColumn":37},{"ruleId":"142","severity":1,"message":"190","line":50,"column":10,"nodeType":"144","messageId":"145","endLine":50,"endColumn":14},{"ruleId":"142","severity":1,"message":"191","line":52,"column":10,"nodeType":"144","messageId":"145","endLine":52,"endColumn":15},{"ruleId":"142","severity":1,"message":"192","line":52,"column":17,"nodeType":"144","messageId":"145","endLine":52,"endColumn":25},{"ruleId":"142","severity":1,"message":"193","line":53,"column":10,"nodeType":"144","messageId":"145","endLine":53,"endColumn":18},{"ruleId":"142","severity":1,"message":"194","line":53,"column":20,"nodeType":"144","messageId":"145","endLine":53,"endColumn":31},{"ruleId":"142","severity":1,"message":"195","line":54,"column":18,"nodeType":"144","messageId":"145","endLine":54,"endColumn":27},{"ruleId":"142","severity":1,"message":"196","line":55,"column":9,"nodeType":"144","messageId":"145","endLine":55,"endColumn":15},{"ruleId":"142","severity":1,"message":"197","line":56,"column":9,"nodeType":"144","messageId":"145","endLine":56,"endColumn":15},{"ruleId":"142","severity":1,"message":"198","line":59,"column":9,"nodeType":"144","messageId":"145","endLine":59,"endColumn":17},{"ruleId":"142","severity":1,"message":"183","line":60,"column":9,"nodeType":"144","messageId":"145","endLine":60,"endColumn":18},{"ruleId":"142","severity":1,"message":"199","line":61,"column":7,"nodeType":"144","messageId":"145","endLine":61,"endColumn":12},{"ruleId":"166","severity":1,"message":"200","line":72,"column":22,"nodeType":"201","endLine":72,"endColumn":46},{"ruleId":"142","severity":1,"message":"182","line":4,"column":10,"nodeType":"144","messageId":"145","endLine":4,"endColumn":21},{"ruleId":"142","severity":1,"message":"202","line":4,"column":23,"nodeType":"144","messageId":"145","endLine":4,"endColumn":34},{"ruleId":"142","severity":1,"message":"171","line":4,"column":36,"nodeType":"144","messageId":"145","endLine":4,"endColumn":40},{"ruleId":"142","severity":1,"message":"190","line":9,"column":10,"nodeType":"144","messageId":"145","endLine":9,"endColumn":14},{"ruleId":"142","severity":1,"message":"203","line":9,"column":16,"nodeType":"144","messageId":"145","endLine":9,"endColumn":23},{"ruleId":"142","severity":1,"message":"204","line":11,"column":10,"nodeType":"144","messageId":"145","endLine":11,"endColumn":16},{"ruleId":"142","severity":1,"message":"195","line":11,"column":18,"nodeType":"144","messageId":"145","endLine":11,"endColumn":27},{"ruleId":"166","severity":1,"message":"173","line":37,"column":6,"nodeType":"168","endLine":37,"endColumn":8,"suggestions":"205"},"no-unused-vars","'axios' is defined but never used.","Identifier","unusedVar","no-native-reassign",["206"],"no-negated-in-lhs",["207"],"'phone' is assigned a value but never used.","'setPhone' is assigned a value but never used.","'password' is assigned a value but never used.","'setPassword' is assigned a value but never used.","'user' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","'useEffect' is defined but never used.","'employee' is assigned a value but never used.","'setEmployee' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","'setUser' is assigned a value but never used.","'navigate' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'load' and 'userInfo'. Either include them or remove the dependency array. You can also do a functional update 'setUserInfo(u => ...)' if you only need 'userInfo' in the 'setUserInfo' call.","ArrayExpression",["208"],["209"],"'Link' is defined but never used.",["210"],"React Hook useEffect has a missing dependency: 'getJob'. Either include it or remove the dependency array.",["211"],"'showSubJob' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'useState' is defined but never used.","'useParams' is defined but never used.","'useNavigate' is defined but never used.","'endPoint1' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'load'. Either include it or remove the dependency array.",["212"],"'HeaderForEmployee' is defined but never used.","'pageCount' is assigned a value but never used.","'setpageCount' is assigned a value but never used.","'setcurrentPage' is assigned a value but never used.","'data' is assigned a value but never used.","'field' is assigned a value but never used.","'setField' is assigned a value but never used.","'sortType' is assigned a value but never used.","'setsortType' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'isIdle' is assigned a value but never used.","'isSort' is assigned a value but never used.","'endPoint' is assigned a value but never used.","'limit' is assigned a value but never used.","Assignments to the 'newArray' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","'useLocation' is defined but never used.","'setData' is assigned a value but never used.","'status' is assigned a value but never used.",["213"],"no-global-assign","no-unsafe-negation",{"desc":"214","fix":"215"},{"desc":"214","fix":"216"},{"desc":"214","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"218","fix":"222"},"Update the dependencies array to be: [load, userInfo]",{"range":"223","text":"224"},{"range":"225","text":"224"},{"range":"226","text":"224"},"Update the dependencies array to be: [getJob]",{"range":"227","text":"228"},"Update the dependencies array to be: [load]",{"range":"229","text":"230"},{"range":"231","text":"228"},[1048,1050],"[load, userInfo]",[892,894],[932,934],[1281,1283],"[getJob]",[1128,1130],"[load]",[937,939]]